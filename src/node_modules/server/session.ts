import type { Request } from "polka";
import type { ServerResponse as Response } from "http";
import type { User } from "server/model";
import md5 from "md5";

/* ~~a bad~~ an epic way to implement session storage.
 * 
 * when user clicked the login button, the server will
 * generate a random number, hash it (probably multiple times),
 * and make it a token for that user.
 * 
 * then for every request it'll require said token
 * to be present in the header.
 * 
 * tokens will only get removed if client sends
 * a request to `/session/logout`
 * 
 * tokens will reset every server restart because like,
 * bruh it's not saved anywhere besides these two objects */

const token2user = {};
const user2token = {};

export function add(user: User): string {
    const { username } = user;
    if (user2token[username]) {
        remove(user2token[username]);
    }

    let token = md5(Date.now() + Math.random().toString());

    // re-hash if the generated token already present
    while (token2user[token]) {
        token = md5(token);
    }

    token2user[token] = username;
    user2token[username] = token;

    return token;
}

export function remove(token: string) {
    const username = token2user[token];
    if (username) {
        delete token2user[token];
        delete user2token[username];
    }
}

export function check(req: Request, res: Response): boolean {
    const token = token2user[req.headers.authorization];
    if (!token) {
        res.statusCode = 401;
        res.setHeader("Content-Type", "text/plain");
        res.end("Access Denied");
    }
    return true;
}
