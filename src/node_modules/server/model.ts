import {
    AllowNull,
    Column,
    DataType,
    PrimaryKey,
    Table as STable,
    Model,
    Sequelize,
} from "sequelize-typescript";


function Table(name: string): Function {
    return STable({
        tableName: name,
        underscored: true,
        timestamps: false
    });
}


@Table("tbl_login")
export class User extends Model {
    @PrimaryKey
    @Column
    username: string;

    @Column(DataType.TEXT)
    password: string;
}


@Table("tbl_pelanggan")
export class Customer extends Model {
    @PrimaryKey
    @Column
    id: number;

    @AllowNull(false)
    @Column({ field: "kode" })
    code: string;

    @AllowNull(false)
    @Column({ field: "nama" })
    name: string;

    @AllowNull(false)
    @Column({ field: "alamat", type: DataType.TEXT })
    address: string;
}


@Table("tbl_barang")
export class Item extends Model {
    @PrimaryKey
    @Column
    id: number;

    @AllowNull(false)
    @Column({ field: "kode" })
    code: string;

    @AllowNull(false)
    @Column({ field: "nama" })
    name: string;

    @AllowNull(false)
    @Column({ field: "harga" })
    price: number;
}


@Table("tbl_transaksi")
export class Transaction extends Model {
    @PrimaryKey
    @Column
    id: number;

    @AllowNull(false)
    @Column({ field: "id_barang" })
    itemId: number;

    @AllowNull(false)
    @Column({ field: "id_pelanggan" })
    customerId: number;

    @AllowNull(false)
    @Column({ field: "tanggal" })
    date: Date;

    @AllowNull(false)
    @Column({ field: "jumlah_barang" })
    qty: number;

    @AllowNull(false)
    @Column({ field: "jumlah_harga" })
    totalPrice: number;

    @AllowNull(false)
    @Column({ field: "diskon" })
    discount: number;

    @AllowNull(false)
    @Column({ field: "harga_setelah_diskon" })
    priceAfterDiscount: number;
}


require("dotenv").config();
const env = process.env;

const sequelize = new Sequelize({
    database: env.DB_NAME,
    dialect: "mariadb",
    username: env.DB_USERNAME,
    password: env.DB_PASSWORD,
    host: env.DB_HOST,
    port: +env.DB_PORT,
    models: [User, Item, Customer, Transaction]
});
